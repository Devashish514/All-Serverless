Resources:
  GraphQlSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    Properties:
      ApiId:
        Fn::GetAtt:
          - AppSyncApi
          - ApiId
      Definition: |
        type Mutation {
          createUser(
            name: String!
            email: String!
            phone: Int!
            profile: String
            gender: GenderEnum
          ): User!

          updateUser(
              name: String,
              email: String
          ): User!
            @aws_auth(cognito_groups: ["Users"])
          
          deleteUser(id: String!): String!
            @aws_auth(cognito_groups: ["Super-Admin"])

          createProduct(
            name: String!
            price: Int!
            description: String!
            productType: ProductTypeEnum!
          ): Product!
            @aws_auth(cognito_groups: ["Super-Admin"])
          
          updateInventory(
            product: ID!, quantity: Int!
          ): Inventory

          createInventory(
            product: ID!
            quantity: Int!
          ): Inventory
            @aws_auth(cognito_groups: ["Super-Admin"])

        }

        type Query {
          getUserById(id: String!): User
            @aws_auth(cognito_groups: ["Super-Admin","Users"])
          
          getAllUsers: [User]
            @aws_auth(cognito_groups: ["Super-Admin","Users"])

          # get Indivisual product by its productId
          getProductById(productId: String!): Product

          getAllProducts: [Product]

          # Get List of Product by its type
          getProductTypeList: [String]

          # Get all prooducts for a indivisual type
          getAllProductsForType(type: String!): [Product]

          # Inventory GET API's
          getInventory: [Inventory]
            @aws_auth(cognito_groups: ["Super-Admin"])

        }

        type User {
          id: String!
          name: String!
          email: String!
          phone: Int!
          profile: String
          gender: GenderEnum
          createdAt: AWSDate!
          updatedAt: AWSDate!
        }

        type Product {
          productId: String!
          name: String!
          price: Int!
          productType: ProductTypeEnum!
          description: String!
          createdAt: AWSDate!
          updatedAt: AWSDate!
        }

        type Inventory {
          inventoryId: String!
          productId: ID!
          quantity: Int!
        }

        enum GenderEnum {
          MALE
          FEMALE
          OTHER
        }

        enum ProductTypeEnum {
          FASHION
          ELECTRONIC
          FURNITURE
        }

        schema {
          query: Query
          mutation: Mutation
        }
